From 2ba9370a5a19b6919d76676cb89bb68887acc6ed Mon Sep 17 00:00:00 2001
From: Chouser <chouser@n01se.net>
Date: Sun, 2 Aug 2009 22:31:55 -0400
Subject: [PATCH] update clojure.test

---
 src/com/markmfredrickson/dejcartes.clj |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/com/markmfredrickson/dejcartes.clj b/src/com/markmfredrickson/dejcartes.clj
index b6717ab..bfba68c 100644
--- a/src/com/markmfredrickson/dejcartes.clj
+++ b/src/com/markmfredrickson/dejcartes.clj
@@ -17,7 +17,7 @@
 
 (ns com.markmfredrickson.dejcartes
   (:refer-clojure)
-  (:use clojure.contrib.test-is clojure.contrib.seq-utils)
+  (:use clojure.test clojure.contrib.seq-utils)
   (:import 
     (org.jfree.chart JFreeChart ChartFactory ChartFrame)
     (org.jfree.chart.plot PlotOrientation)
@@ -149,7 +149,7 @@
 
 (deftest test-cat-data-plots
   (let [cat {"Emacs" 20 "Vi" 30 "Eclipse" 5}]
-    (are (instance? JFreeChart _1)
+    (are [x] (instance? JFreeChart x)
       (bar "Bar Chart" "cat axis" "value axis" cat)
       (area "Area chart" "cat axis" "value axis" cat)
       (stacked-area "Area chart" "cat axis" "value axis" cat)
@@ -225,7 +225,7 @@
 
 (deftest xy-dataset-test
   (let [xy-data {"Series 1" '((1 2) (3 4) (4 2)) "Series 2" '((3 4) (2 3) (3 4))}]
-    (are (instance? JFreeChart _1)
+    (are [x] (instance? JFreeChart x)
       (scatter "scatter chart" "x-axis" "y-axis" xy-data)
       (polar "polar chart" xy-data)
       (xy-bar "title" "x axis" false "y axis" xy-data)
-- 
1.6.0.4


From 266703a7baac6e142ee5fe71b6bbde2fbce5d8dc Mon Sep 17 00:00:00 2001
From: Chouser <chouser@n01se.net>
Date: Sun, 2 Aug 2009 23:04:15 -0400
Subject: [PATCH] Add type hints to avoid runtime reflection.

---
 src/com/markmfredrickson/dejcartes.clj |   19 ++++++++++---------
 1 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/src/com/markmfredrickson/dejcartes.clj b/src/com/markmfredrickson/dejcartes.clj
index bfba68c..a58c2bc 100644
--- a/src/com/markmfredrickson/dejcartes.clj
+++ b/src/com/markmfredrickson/dejcartes.clj
@@ -52,9 +52,9 @@
 ; createWaferMapChart
 
 ;;; Vars to control some default plotting behaviors ;;;
-(def *legend* true)
-(def *tooltips* true)
-(def *urls* false)
+(def #^Boolean *legend* true)
+(def #^Boolean *tooltips* true)
+(def #^Boolean *urls* false)
 (def *orientation* PlotOrientation/VERTICAL)
 
 ;;; Helper Stuff ;;;
@@ -77,7 +77,7 @@
   "Internal function to convert from a sequence of pairs into a pie chart dataset"
   ([data]
     (let [pds (new DefaultPieDataset)]
-      (doseq [i data] (.setValue pds (first i) (second i)))
+      (doseq [i data] (.setValue pds #^Comparable (first i) #^Number (second i)))
       pds))
   {:test (fn []
     (is (instance? PieDataset (pie-dataset {"Hello" 123 "World" 456}))))})
@@ -88,7 +88,7 @@
    e.g. => (pie \"This is the Title\" '((\"Emacs\" 20) (\"Vi\" 15) (\"Eclipse\" 30)))"
   ([title pairs] 
     (ChartFactory/createPieChart 
-      title (pie-dataset pairs) *legend* *tooltips* *urls*))
+      #^String title #^PieDataset (pie-dataset pairs) *legend* *tooltips* *urls*))
   {:test (fn []
     (let [test-chart (pie "Test Title" '(("Emacs" 20) ("Vi" 15) ("Eclipse" 30)))] 
       (is (instance? JFreeChart test-chart))))})
@@ -97,11 +97,11 @@
   "Internal data to create category datasets"
   ([seqs]
     (let [cat (new DefaultCategoryDataset)]
-      (doseq [[title data] seqs]
+      (doseq [[#^Comparable title #^Number data] seqs]
         (if (coll? data)
-          (doseq [[idx v] (indexed data)]
+          (doseq [[#^Comparable idx #^Number v] (indexed data)]
             (if (coll? v)
-              (.addValue cat (second v) (first v) title)
+              (.addValue cat #^Number (second v) #^Comparable (first v) title)
               (.addValue cat v idx title)))
           (.addValue cat data 0 title)))
       cat))
@@ -161,7 +161,8 @@
   "Internal function to make an XYSeries out of a title and seq"
   ([title sequence]
     (let [xys (new XYSeries title)]
-      (doseq [pair sequence] (.add xys (first pair) (second pair)))
+      (doseq [pair sequence]
+        (.add xys #^Number (first pair) #^Number (second pair)))
       xys))
   {:test (fn []
     (is (instance? XYSeries (xy-series :title '((1 2) (3 4) (4 5))))))})
-- 
1.6.0.4


From cf209970747193dc593d5b1b2842355ce5331d6f Mon Sep 17 00:00:00 2001
From: Chouser <chouser@n01se.net>
Date: Fri, 7 Aug 2009 22:37:09 -0400
Subject: [PATCH] Add time-series-chart

---
 src/com/markmfredrickson/dejcartes.clj |   46 +++++++++++++++++++++++++++++++-
 1 files changed, 45 insertions(+), 1 deletions(-)

diff --git a/src/com/markmfredrickson/dejcartes.clj b/src/com/markmfredrickson/dejcartes.clj
index a58c2bc..0e2bff6 100644
--- a/src/com/markmfredrickson/dejcartes.clj
+++ b/src/com/markmfredrickson/dejcartes.clj
@@ -23,7 +23,9 @@
     (org.jfree.chart.plot PlotOrientation)
     (org.jfree.data.category CategoryDataset DefaultCategoryDataset)
     (org.jfree.data.general DefaultPieDataset PieDataset)
-    (org.jfree.data.xy XYDataset XYSeries XYSeriesCollection)))
+    (org.jfree.data.xy XYDataset XYSeries XYSeriesCollection)
+    (org.jfree.data.time RegularTimePeriod TimeSeries TimeSeriesCollection
+                         Month Day)))
 
 ; Functions to wrap:
 ; createPieChart (for previous data set)
@@ -232,6 +234,48 @@
       (xy-bar "title" "x axis" false "y axis" xy-data)
       (histogram "title" "x axis" "y axis" xy-data))))
 
+(defn- time-series
+  "Internal function to make an TimeSeries out of a title and seq"
+  ([title sequence]
+   (time-series title (or (class (ffirst sequence)) Day) sequence))
+  ([title cls sequence]
+    (let [times (new TimeSeries title cls)]
+      (doseq [pair sequence]
+        (.add times #^RegularTimePeriod (first pair) #^Number (second pair)))
+      times))
+  {:test (fn []
+    (is (instance? TimeSeries (time-series :title [[(Month. 1 2009) 2]
+                                                   [(Month. 3 2009) 4]
+                                                   [(Month. 4 2009) 5]]))))})
+
+(defn- time-series-collection
+  "Internal function to convert a set of seqs into xy pair sequences"
+  ([seqs]
+   (let [ds (new TimeSeriesCollection)]
+     (doseq [[title series] seqs]
+       (.addSeries ds (time-series title series)))
+     ds))
+  {:test (fn []
+    (is
+      (instance?
+        XYDataset
+        (time-series-collection {"Series 1" [[(Month. 1 2009) 2]
+                                             [(Month. 2 2009) 2]
+                                             [(Month. 4 2009) 4]]
+                                 "Series 2" [[(Month. 2 2009) 10]
+                                             [(Month. 4 2009) 8]
+                                             [(Month. 7 2009) 7]]}))))})
+
+(defn time-series-chart [title x-title y-title data]
+  (ChartFactory/createTimeSeriesChart
+    title
+    x-title
+    y-title
+    (time-series-collection data)
+    *legend*
+    *tooltips*
+    *urls*))
+
 ;;; Agents for viewing charts
 (with-test
   (defn view [title chart]
-- 
1.6.0.4

